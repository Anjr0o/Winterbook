{"version":3,"sources":["components/phoneBook.js","views/GenericTable.js","container/App.js","serviceWorker.js","index.js"],"names":["AddContactDetailsForm","id","firstName","lastName","phoneNumber","favorite","addUser","initialFormState","useState","user","setUser","handleInputChange","target","name","value","className","onSubmit","event","preventDefault","onError","errors","console","log","htmlFor","variant","onChange","validators","errorMessages","defaultCountry","phone","Button","size","type","GenericTable","data","title","rowsKeys","handleChecked","handleTrash","dataList","length","map","key","index","Checkbox","checked","icon","checkedIcon","IconButton","onClick","aria-label","App","users","setUsers","userid","AppBar","position","Toolbar","edge","color","Typography","data-words","data-delay","data-deleteDelay","data-owner","primaryKey","columns","updatedUsers","filter","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfc0423c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport MuiPhoneNumber from \"material-ui-phone-number\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nconst AddContactDetailsForm = ({\n  id,\n  firstName,\n  lastName,\n  phoneNumber,\n  favorite,\n  addUser,\n}) => {\n  const initialFormState = {\n    id: null || id,\n    firstName: \"\" || firstName,\n    lastName: \"\" || lastName,\n    phoneNumber: \"\" || phoneNumber,\n    favorite: false || favorite,\n  };\n\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = ({ target }) => {\n    const { name, value } = target;\n    setUser({ ...user, [name]: value });\n  };\n\n  const handlePhoneChange = (phone) => {\n    setUser({ ...user, phoneNumber: phone });\n  };\n\n  return (\n    <div className=\"phoneBook\">\n      <ValidatorForm\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (!user.firstName || !user.lastName || !user.phoneNumber) return;\n          addUser(user);\n          setUser(initialFormState);\n        }}\n        onError={(errors) => console.log(errors)}\n      >\n        <label htmlFor=\"firstName\">First Name</label>\n\n        <TextValidator\n          variant=\"filled\"\n          onChange={handleInputChange}\n          name=\"firstName\"\n          value={user.firstName}\n          validators={[\"required\"]}\n          errorMessages={[\"this field is required\"]}\n        />\n        <label htmlFor=\"lastName\">Last Name</label>\n\n        <TextValidator\n          variant=\"filled\"\n          onChange={handleInputChange}\n          name=\"lastName\"\n          value={user.lastName}\n          validators={[\"required\"]}\n          errorMessages={[\"this field is required\"]}\n        />\n        <label htmlFor=\"Phone Number\">Phone Number</label>\n        <MuiPhoneNumber\n          defaultCountry={\"us\"}\n          value={user.phoneNumber}\n          onChange={handlePhoneChange}\n          variant=\"filled\"\n        />\n        <br />\n        <label htmlFor=\"Submit\">Submit</label>\n        <div className=\"buttonStuff\">\n          <Button size=\"large\" variant=\"contained\" type=\"submit\">\n            Add Contact\n          </Button>\n        </div>\n      </ValidatorForm>\n    </div>\n  );\n};\n\nexport default AddContactDetailsForm;\n","import React from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\n\nconst GenericTable = ({\n  data,\n  title,\n  rowsKeys,\n  handleChecked,\n  handleTrash,\n}) => {\n  const dataList = data;\n\n  return (\n    <div className=\"table\">\n      <h2>View {title} </h2>\n      {dataList && dataList.length ? (\n        <FlipMove>\n          {dataList.map((data) => (\n            <div key={data.phoneNumber}>\n              {rowsKeys.map((key, index) => (\n                <span key={index + data[key] + data.id}>{data[key]} </span>\n              ))}\n              <Checkbox\n                checked={data.favorite}\n                onChange={(event) => handleChecked(data)}\n                icon={<FavoriteBorder />}\n                checkedIcon={<Favorite />}\n                name=\"checked\"\n              />\n              <IconButton onClick={() => handleTrash(data)} aria-label=\"delete\">\n                <DeleteIcon />\n              </IconButton>\n            </div>\n          ))}\n        </FlipMove>\n      ) : (\n        <FlipMove>\n          <div key=\"abc\"> No Data in {title}</div>\n        </FlipMove>\n      )}\n    </div>\n  );\n};\n\nexport default GenericTable;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport PhoneBook from \"../components/phoneBook\";\nimport GenericTable from \"../views/GenericTable\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ContactPhoneIcon from \"@material-ui/icons/ContactPhone\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nfunction App() {\n  const usersData = [];\n  const [users, setUsers] = useState(usersData);\n  let userid = 0;\n\n  const addUser = (user) => {\n    userid++;\n    user.id = userid;\n    setUsers([...users, user]);\n  };\n\n  // I decided not to sort Items, but here is the code to do so, by default it sorts by lastName.\n  const sortedArray = (users, fieldName = \"lastName\") => {\n    return users.sort(function (a, b) {\n      var nameA = a[fieldName].toLowerCase(),\n        nameB = b[fieldName].toLowerCase();\n      if (nameA < nameB)\n        //sort string ascending\n        return -1;\n      if (nameA > nameB) return 1;\n      return 0; //default return value (no sorting)\n    });\n  };\n\n  const handleChecked = (data) => {\n    const updatedUsers = users.filter(\n      (item) => item.phoneNumber !== data.phoneNumber\n    );\n    if (!data.favorite) {\n      setUsers([data, ...updatedUsers]);\n    } else {\n      setUsers([...updatedUsers, data]);\n    }\n    data.favorite = !data.favorite;\n  };\n\n  const handleTrash = (data) => {\n    const updatedUsers = users.filter(\n      (item) => item.phoneNumber !== data.phoneNumber\n    );\n    setUsers([...updatedUsers]);\n  };\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className=\"iconbutton\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <ContactPhoneIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className=\"title\">\n            <h1>\n              Winterbook is\n              <span\n                className=\"typer\"\n                id=\"main\"\n                data-words=\" peaceful, fast, fun, easy, helpful, accessible, reliable\"\n                data-delay=\"100\"\n                data-deleteDelay=\"1000\"\n              ></span>\n              <span className=\"cursor\" data-owner=\"main\"></span>\n            </h1>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <PhoneBook addUser={addUser} />\n      <GenericTable\n        primaryKey={\"id\"}\n        title={\"Phone Book\"}\n        columns={[\"First Name\", \"Last Name\", \"Phone Number\"]}\n        rowsKeys={[\"firstName\", \"lastName\", \"phoneNumber\"]}\n        data={users}\n        handleTrash={handleTrash}\n        handleChecked={handleChecked}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}